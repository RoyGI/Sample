// --------------------------------------------------------------------------------------------------------------------
// <copyright file=" QueryProductHandler.cs" company="EPIC Software">
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
// </copyright>
// <summary>
//  Contributors: Roy Gonzalez
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Epic.Sample.Application.Handlers
{
    using System.Threading.Tasks;

    using Epic.Sample.Application.Commands;
    using Epic.Sample.Application.Queries;
    using Epic.Sample.Domain.Repository;

    using GraphQL;
    using GraphQL.Types;

    using MediatR;

    /// <summary>
    /// Class QueryProductHandler.
    /// Implements the <see>
    ///         <cref>MediatR.RequestHandler{Epic.Sample.Application.Commands.QueryProduct, GraphQL.ExecutionResult}</cref>
    ///     </see>
    /// </summary>
    /// <seealso>
    ///     <cref>MediatR.RequestHandler{Epic.Sample.Application.Commands.QueryProduct, GraphQL.ExecutionResult}</cref>
    /// </seealso>
    /// <autogeneratedoc />
    public class QueryProductHandler : RequestHandler<QueryProduct, ExecutionResult>
    {
        /// <summary>
        /// The document
        /// </summary>
        /// <autogeneratedoc />
        private readonly IDocumentExecuter document;

        /// <summary>
        /// The repository
        /// </summary>
        /// <autogeneratedoc />
        private readonly IProductRepository repository;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryProductHandler" /> class.
        /// </summary>
        /// <param name="document">The document.</param>
        /// <param name="repository">The repository.</param>
        /// <autogeneratedoc />
        public QueryProductHandler(IDocumentExecuter document, IProductRepository repository)
        {
            this.document = document;
            this.repository = repository;
        }

        /// <summary>
        /// Handles the specified request.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>the ExecutionResult.</returns>
        protected override ExecutionResult Handle(QueryProduct request)
        {
            var schema = new Schema { Query = new ProductQuery(this.repository) };
            var executionOptions = new ExecutionOptions
                                       {
                                           Schema = schema, Query = request.Query
                                       };
            return this.document.ExecuteAsync(executionOptions).Result;
        }
    }
}