// --------------------------------------------------------------------------------------------------------------------
// <copyright file=" ProductQuery.cs" company="EPIC Software">
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
// </copyright>
// <summary>
//  Contributors: Roy Gonzalez
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System.Diagnostics;

namespace Epic.Sample.Application.Queries
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Epic.Sample.Application.Models;
    using Epic.Sample.Domain.Entities;
    using Epic.Sample.Domain.Repository;

    using GraphQL.Types;

    /// <summary>
    /// Class ProductQuery.
    /// Implements the <see cref="GraphQL.Types.ObjectGraphType" />
    /// </summary>
    /// <seealso cref="GraphQL.Types.ObjectGraphType" />
    /// <autogeneratedoc />
    public class ProductQuery : ObjectGraphType
    {
        /// <summary>
        /// The repository
        /// </summary>
        /// <autogeneratedoc />
        private readonly IProductRepository repository;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductQuery"/> class.
        /// </summary>
        /// <param name="repository">The repository.</param>
        /// <autogeneratedoc />
        public ProductQuery(IProductRepository repository)
        {
            this.repository = repository;

            this.Field<ProductType>(
                "product",
                arguments: new QueryArguments(new QueryArgument<StringGraphType> { Name = "id" }),
                resolve: c => this.Get(c.GetArgument<string>("id")));

            this.Field<ListGraphType<ProductType>>(
                "top_products",
                "get products with top",
                arguments: new QueryArguments(new QueryArgument<IntGraphType> { Name = "first" }),
                resolve: c => this.GetAll(c.GetArgument<int>("first")));
            
            this.Field<ListGraphType<ProductType>>(
                "top_order_products",
                arguments: new QueryArguments(
                    new QueryArgument<IntGraphType> { Name = "first" }, 
                    new QueryArgument<StringGraphType> { Name = "orderBy"} 
                 ),
                resolve: c => this.GetAll(c.GetArgument<int>("first"),c.GetArgument<string>("orderBy")));

            this.Field<ListGraphType<ProductType>>(
                "all_products",
                "get all products",
                resolve: c => this.GetAll());
        }

        /// <summary>
        /// Gets all.
        /// </summary>
        /// <returns>The list of the products.</returns>
        /// <autogeneratedoc />
        private IEnumerable<Product> GetAll() => this.repository.FindAll();

        /// <summary>
        /// Gets the specified identifier.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>the Product .</returns>
        private Product Get(string id) => this.repository.Find(c => c.Id == Guid.Parse(id));

        /// <summary>
        /// Gets all.
        /// </summary>
        /// <param name="first">The first.</param>
        /// <returns>IEnumerable ProductUpdate .</returns>
        private IEnumerable<Product> GetAll(int first) => this.repository.FindAll().Take(first);


        /// <summary>
        /// Gets all.
        /// </summary>
        /// <param name="first">The first.</param>
        /// <returns>IEnumerable ProductUpdate .</returns>
        private IEnumerable<Product> GetAll(int first, string order)
        {
            switch (order)
            {
                case "name" : return this.repository.FindAll().OrderBy(c => c.Name).Take(first);
                case "price" : return this.repository.FindAll().OrderBy(c => c.Price).Take(first);
                case "quantity" : return this.repository.FindAll().OrderBy(c => c.Quantity).Take(first);
            }
            
            return null;
        } 
        
    }
}